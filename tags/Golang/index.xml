<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Binean&#39;s Blog</title>
    <link>https://bzhou830.github.io/tags/Golang/</link>
    <description>Recent content in Golang on Binean&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 11 May 2018 09:16:34 +0800</lastBuildDate>
    
	<atom:link href="https://bzhou830.github.io/tags/Golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang|10 http及其他标准库</title>
      <link>https://bzhou830.github.io/posts/20180511Gohttp%E5%8F%8A%E5%85%B6%E4%BB%96%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Fri, 11 May 2018 09:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/posts/20180511Gohttp%E5%8F%8A%E5%85%B6%E4%BB%96%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Golang|09 Channel</title>
      <link>https://bzhou830.github.io/posts/20180510GoChannel/</link>
      <pubDate>Thu, 10 May 2018 09:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/posts/20180510GoChannel/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Golang|08 Goroutine</title>
      <link>https://bzhou830.github.io/posts/20180509GoGoroutine/</link>
      <pubDate>Wed, 09 May 2018 09:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/posts/20180509GoGoroutine/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Golang|07 测试与性能调优</title>
      <link>https://bzhou830.github.io/posts/20180508Go%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</link>
      <pubDate>Tue, 08 May 2018 09:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/posts/20180508Go%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Golang|06 错误处理和资源管理</title>
      <link>https://bzhou830.github.io/posts/20180507Go%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%92%8C%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 07 May 2018 09:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/posts/20180507Go%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%92%8C%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Golang|05 函数式编程</title>
      <link>https://bzhou830.github.io/posts/20180506Go%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sun, 06 May 2018 09:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/posts/20180506Go%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Golang|04 面向接口</title>
      <link>https://bzhou830.github.io/posts/20180505Go%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sat, 05 May 2018 09:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/posts/20180505Go%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3/</guid>
      <description>golang中没有继承和多态，只支持封装，那些在C/C++/Java中使用继承和多态实现的方式，在golang中就可以使用接口来进行实现，golang的接口比其他语言就灵活很多。 如下就是一个使用接口的例子： type Traversal interface { Traverse() } func main() { traversal := getTraversal() traversal.Traverse() } 1. duck typing的概念 1.1 大黄鸭是鸭子吗？ 传统类</description>
    </item>
    
    <item>
      <title>Golang|03 面向对象</title>
      <link>https://bzhou830.github.io/posts/20180504Go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 04 May 2018 09:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/posts/20180504Go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>1.结构体和方法 go 语言仅支持封装，不支持继承和多态 go语言没有 class，只有 struct 1.1 结构的创建 root.left = &amp;amp;treeNode{} root.right = &amp;amp;treeNode{5, nil, nil} root.right.left = new(treeNode) 不论地址还是结构本身，一律使用.来访问成员 func createNode(value int) *treeNode { return &amp;amp;treeNode{value: value} } root.left.right = createNode(2) //使用自定义工厂函数 注意上述代码中，createNode返回了局部变量的地址, 这种方式在C/C++</description>
    </item>
    
    <item>
      <title>Golang|02 内建容器</title>
      <link>https://bzhou830.github.io/posts/20180503Go%E5%86%85%E5%BB%BA%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Thu, 03 May 2018 09:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/posts/20180503Go%E5%86%85%E5%BB%BA%E5%AE%B9%E5%99%A8/</guid>
      <description>1.数组 var arr1 [5]int // 声明数组 arr2 := [3]int{1, 3, 5} // 声明数组并赋值 arr3 := [...]int{2, 4, 6, 8, 10} // 不输入数组长度，让编译器来计算长度 var grid [4][5]int // 二维数组 数量写在类型前 可通过 _ 来省略变量，不仅仅是 range，任何地方都可通过 _ 来省略变量 sum := 0 for _, v := range numbers { sum += v } 如果只要下标 i，可写成for i := range numbers 为人么要用 range? 因为意</description>
    </item>
    
    <item>
      <title>Golang|01 基础语法</title>
      <link>https://bzhou830.github.io/posts/20180502Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 02 May 2018 09:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/posts/20180502Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>1. 变量和常量 golang中变量的定义结构是：var 变量名 类型。golang中内建变量类型有： bool, string (u)int, (u)int8, (u)int16, (u)int32, (u)int64, uintptr（指针）未指定长度时根据操作系统是多少位来决定 byte, rune（长度32位，相当于 char，解决多国语言问题） float32, float64, complex64, complex128 可以看到golang中没有char, 只有rune</description>
    </item>
    
  </channel>
</rss>