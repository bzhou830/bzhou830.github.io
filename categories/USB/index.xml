<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>USB on 菠萝蜜</title>
    <link>https://bzhou830.github.io/categories/USB/</link>
    <description>Recent content in USB on 菠萝蜜</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 05 Feb 2023 19:16:34 +0800</lastBuildDate>
    
	<atom:link href="https://bzhou830.github.io/categories/USB/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WPP Tracing</title>
      <link>https://bzhou830.github.io/post/20230105Tracing/</link>
      <pubDate>Sun, 05 Feb 2023 19:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/post/20230105Tracing/</guid>
      <description>1. Advantages over KdPrint  It can be enabled, disabled and filtered during runtime with minimal overhead by logging in real-time binary messages Traces are are automatically included in the crash dumps Logs can be easily collected using a script Can be very useful for automating manual tests which use log&#39;s output Time Stamps, Function names and some other useful data can be easily included into log  2.Viewing the WPP trace messages in real-time  Copy the driver&#39;s PDB file from the build folder to the target machine. Copy traceview.exe from WDK install location on the build machine (C:\Program Files (x86)\Windows Kits\8.1\Tools\x64\traceview.exe) to the target machine. Start traceview as an Administrator. On the File menu, click Create New Log Session. Click Add Provider. Click PDB (Debug Information) File, and then choose the .pdb file which came with the driver&#39;s build, in the build&#39;s folder.</description>
    </item>
    
    <item>
      <title>USB-HID鼠标、键盘通讯格式</title>
      <link>https://bzhou830.github.io/post/20220601GD32USB05/</link>
      <pubDate>Wed, 01 Jun 2022 19:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/post/20220601GD32USB05/</guid>
      <description>1. 鼠标的通讯数据格式 鼠标发送给PC的数据每次4个字节 BYTE1 BYTE2 BYTE3 BYTE4 定义分别是： BYTE1 -- |--bit7: 1 表示 Y 坐标的变化量超出－256 ~ 255的范围,0表示没有溢出 |--bit6: 1 表示 X 坐标的变化量超出－256 ~ 255的范围，0表示没有溢出 |--bit5: Y 坐标变化的符号位，1表示负数，即鼠标向下移动 |--bit4: X 坐标变化的符号位，1表示</description>
    </item>
    
    <item>
      <title>USB探索| Flash 烧录器</title>
      <link>https://bzhou830.github.io/post/20220420GD32USBEx/</link>
      <pubDate>Wed, 20 Apr 2022 19:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/post/20220420GD32USBEx/</guid>
      <description>flash芯片26VF064B的memory layout可以从芯片手册看到。 有8个8K Bytes, 2个32K Bytes, 126个64K Bytes.总计就是8M的容量。所以就是将Flash整个Memory全部写一遍（8M 所以就是将Flash整个Memory全部写一遍（8M Bytes的空间），写完之后去</description>
    </item>
    
    <item>
      <title>USB探索|3.从USB键盘改造成USB鼠标</title>
      <link>https://bzhou830.github.io/post/20220220GD32USB04/</link>
      <pubDate>Sun, 20 Feb 2022 19:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/post/20220220GD32USB04/</guid>
      <description>1. 实现思路 有了前面实现USB键盘的基础，实现USB鼠标就变得相对非常的简单了。和USB键盘一样，USB鼠标也是HID设备。因此只需要修改HID报告描述符就能成功的把USB键盘改造成一个USB鼠标。 这里直接采用《圈圈带你玩USB》书中的鼠标案例中的HID报告描述符。内容如下： const uint8_t hid_report_desc[USB_HID_REPORT_DESC_LEN]</description>
    </item>
    
    <item>
      <title>USB探索|3.USB键盘的实现</title>
      <link>https://bzhou830.github.io/post/20220213GD32USB03/</link>
      <pubDate>Sun, 13 Feb 2022 19:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/post/20220213GD32USB03/</guid>
      <description>1. 实现思路 在GD32L233C-Start板子的官方例程中有一个USB CDC的例程，此外就没有任何USB相关的例程了。从这个例程中我也是可以了解USB设备的枚举过程。有了枚举过程那么剩下的就是设备描述符，HID描述符之类的了。正好有本书中对这些描述符有很好的介绍，那么我们就按照这</description>
    </item>
    
    <item>
      <title>USB探索|2.设备的连接和枚举</title>
      <link>https://bzhou830.github.io/post/20220212GD32USB03/</link>
      <pubDate>Fri, 11 Feb 2022 22:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/post/20220212GD32USB03/</guid>
      <description>1. 主设备和从设备 USB通讯的两端分别称为:HOST(主设备/USB主机)和Device(从设备/USB设备)，最常见的主设备就是PC。 USB主设备一般有以下的功能： 检测USB设备的插拔动作 管理主从通讯之间的控制流 管理主从通讯之间的数据流 记录主机状态和设备动作信息 控制主控制器和US</description>
    </item>
    
    <item>
      <title>USB探索|1.认识USB协议</title>
      <link>https://bzhou830.github.io/post/20220212GD32USB02/</link>
      <pubDate>Fri, 11 Feb 2022 19:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/post/20220212GD32USB02/</guid>
      <description>1. USB接口特点 简单易用 使用统一制式电缆和连接进行外设扩展，即插即用，支持热插拔 稳定性佳 使用差分信号传输，较强的纠错能力，多种差错管理和恢复机制 速度选择 1.5Mbps/ 12Mbps/ 480Mbps/ 5Gbps/ 10Gbps/ 20Gbps多种等级 使用灵活 提供了适合各种应用的传输类型、协议 应用广泛 协议标准向下兼容，系统集成驱动，扩展性强，连接支</description>
    </item>
    
    <item>
      <title>USB探索|0.偶遇GD32L233</title>
      <link>https://bzhou830.github.io/post/20220127GD32USB01/</link>
      <pubDate>Thu, 27 Jan 2022 19:16:34 +0800</pubDate>
      
      <guid>https://bzhou830.github.io/post/20220127GD32USB01/</guid>
      <description>1. 序章 早在除夕之夜说过自己萌生了设计一个简单的外设来进行Windows驱动探索的想法。并且看中了USB外设，因为USB接口使用方便，硬件设计也相对简单。 春节期间恰好遇到了电子工程世界上兆易创新做的评测活动，评测活板子使用MCU是GD32L233，这颗芯片支持USB2.0, 正好可以</description>
    </item>
    
  </channel>
</rss>